install shiny
install.packages('shiny')
library(tidyverse)
library(tidyverse)
library(tidytext)
library(DT)
library(tidytext)
library(tidyverse)
install.packages('tidytext', 'DT')
install.packages('tidytext', 'DT')
library(tidytext)
library(tidytext)
library(plotly)
install.packages('plotly')
install.packages("plotly")
library(tidyverse)
library(tidyverse)
library(tidytext)
library(plotly)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(tidyverse)
library(tidytext)
library(plotly)
install.packages('plotly')
library(plotly)
install.packages('hexbin')
library(plotly)
install.packages('plotly')
library(plotly)
library(plotly)
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
install.packages('DT')
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
install.packages('wordcloud2')
library(wordcloud2)
library(gridExtra)
install.packages('ngram')
library(ngram)
library(shiny)
install.packages('shiny')
library(shiny)
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
# load lyrics data
load('../output/processed_lyrics.RData')
# load lyrics data
load('../output/processed_lyrics.RData')
install.packages("hexbin")
# load lyrics data
load('../output/processed_lyrics.RData')
# load lyrics data
load('../output/processed_lyrics.RData')
load("/Users/SagarLal/Desktop/fall2019-proj1--slal12/output/processed_lyrics.RData")
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
lyrics_list <- c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Other")
time_list <- c("1970s", "1980s", "1990s", "2000s", "2010s")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
word_tibble <- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
lyrics_list <- c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Other")
time_list <- c("1970s", "1980s", "1990s", "2000s", "2010s")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
word_tibble <- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
# Define UI for app that draws a histogram ----
ui <- navbarPage(strong("Lyrics Analysis"),
tabPanel("Overview",
titlePanel("Most frequent words"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "nwords1",
label = "Number of terms in the first word cloud:",
min = 5, max = 100, value = 50),
selectInput('genre1', 'Genre of the first word cloud',
lyrics_list, selected='Folk')
),
# Main panel for displaying outputs ----
mainPanel(
wordcloud2Output(outputId = "WC1", height = "300")
)
),
hr(),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(inputId = "nwords2",
label = "Number of terms in the second word cloud:",
min = 5, max = 100, value = 50),
selectInput('genre2', 'Genre of the second word cloud',
lyrics_list, selected='Metal')
),
# Main panel for displaying outputs ----
mainPanel(
wordcloud2Output(outputId = "WC2", height = "300")
)
)
),
tabPanel("Time Variation",
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput('decade1', 'Selected decade for the first plot:',
time_list, selected='1970s'),
selectInput('decade2', 'Selected decade for the second plot:',
time_list, selected='1980s'),
numericInput(inputId = "topBigrams",
label = "Number of top pairs to view:",
min = 1,
max = 20,
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
fluidRow(
column(5,
plotlyOutput("bigram1")),
column(5,
plotlyOutput("bigram2"))
)
)
)
),
tabPanel("Data",
DT::dataTableOutput("table"))
)
server <- function(input, output) {
output$WC1 <- renderWordcloud2({
count(filter(word_tibble, id %in% which(dt_lyrics$genre == input$genre1)), word, sort = TRUE) %>%
slice(1:input$nwords1) %>%
wordcloud2(size=0.6, rotateRatio=0.2)
})
output$WC2 <- renderWordcloud2({
count(filter(word_tibble, id %in% which(dt_lyrics$genre == input$genre2)), word, sort = TRUE) %>%
slice(1:input$nwords2) %>%
wordcloud2(size=0.6, rotateRatio=0.2)
})
output$bigram1 <- renderPlotly({
year_start <- as.integer(substr(input$decade1, 1, 4))
dt_sub <- filter(dt_lyrics, year>=year_start) %>%
filter(year<(year_start+10))
lyric_bigrams <- dt_sub %>%
unnest_tokens(bigram, stemmedwords, token = "ngrams", n = 2)
bigram_counts <- lyric_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
combined_words <- apply(bigram_counts[c(1, 2)], 1, paste , collapse = " " )[1:input$topBigrams]
x_names <- factor(combined_words, levels = rev(combined_words))
plot_ly(
x = bigram_counts$n[1:input$topBigrams],
y = x_names,
name = "Bigram",
type = "bar",
orientation = 'h'
)
})
output$bigram2 <- renderPlotly({
year_start <- as.integer(substr(input$decade2, 1, 4))
dt_sub <- filter(dt_lyrics, year>=year_start) %>%
filter(year<(year_start+10))
lyric_bigrams <- dt_sub %>%
unnest_tokens(bigram, stemmedwords, token = "ngrams", n = 2)
bigram_counts <- lyric_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
combined_words <- apply(bigram_counts[c(1, 2)], 1, paste , collapse = " " )[1:input$topBigrams]
x_names <- factor(combined_words, levels = rev(combined_words))
plot_ly(
x = bigram_counts$n[1:input$topBigrams],
y = x_names,
name = "Bigram",
type = "bar",
orientation = 'h'
)
})
output$table <- DT::renderDataTable({
DT::datatable(dt_lyrics)
})
}
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
print(R.version)
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
lyric_trigrams <- dt_lyrics %>%
unnest_tokens(trigram, stemmedwords, token = "ngrams", n = 3)
View(dt_lyrics)
trigram_counts <- lyric_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ", remove = FALSE) %>%
count(word1, word2, word3, trigram, sort = TRUE)
genre_counts = dt_lyrics %>% group_by(genre) %>% mutate(count = n()) %>% ungroup()
View(genre_counts)
genre_counts = dt_lyrics %>% count(genre, sort = TRUE)
View(genre_counts)
View(trigram_counts)
trigram_seperated <- lyric_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ", remove = FALSE)
View(trigram_seperated)
unique_trigrams = trigram_seperated %>%
filter(word1 != word2 & word2 != word3 & word1 != word3)
View(unique_trigrams)
View(dt_lyrics)
trigram_genre_year_counts = unique_trigrams %>% group_by(genre, year, trigram) %>% mutate(count = n()) %>% ungroup()
View(trigram_genre_year_counts)
filtered_counts = trigram_genre_year_counts %>% filter(count > 1)
View(filtered_counts)
genre_percentiles = trigram_genre_year_counts %>% group_by(genre) %>%
summarise(fifty = quantile(count, probs=0.5), quantile(count, probs=0.75), ninety=quantile(count, probs=0.90))
View(genre_percentiles)
genre_percentiles = trigram_genre_year_counts %>% group_by(genre) %>%
summarise(sixty = quantile(count, probs=0.6), eighty_five = quantile(count, probs=0.85), ninety_five=quantile(count, probs=0.95))
filtered_counts = trigram_genre_year_counts %>% filter(count > 3)
View(filtered_counts)
genre_percentiles = trigram_genre_year_counts %>% group_by(genre) %>%
summarise(sixty = quantile(count, probs=0.6), eighty_five = quantile(count, probs=0.85), ninety_five=quantile(count, probs=0.95), one_hundre = quantile(count, probs = 1))
genre_counts = dt_lyrics %>% count(genre, sort = TRUE)
lyric_trigrams <- dt_lyrics %>%
unnest_tokens(trigram, stemmedwords, token = "ngrams", n = 3)
trigram_seperated <- lyric_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ", remove = FALSE)
unique_trigrams = trigram_seperated %>%
filter(word1 != word2 & word2 != word3 & word1 != word3)
trigram_genre_year_counts = unique_trigrams %>% group_by(genre, trigram) %>% mutate(count = n()) %>% ungroup()
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(ggplot2)
print(R.version)
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
#Find number of songs per genre in a given year
genre_year_song_counts = dt_lyrics %>% group_by(genre,year) %>% mutate(genre_year_count = n()) %>% ungroup() %>% select(genre, year, genre_year_count) %>% unique() %>% filter(genre != "Other" & genre != "Not Available" & year >2003)
ggplot(data = genre_year_song_counts,
mapping = aes(x = year, y = genre_year_count, color = genre)) +
geom_line() +
facet_grid(rows = vars(genre), scales = "free_y") +
xlab("Year") +
ylab(label="Number of Songs") +
ggtitle("Number of songs in each genre in a year") +
theme_bw()
#Only care about trigram appearing once in a song
lyric_trigrams <- dt_lyrics %>%
unnest_tokens(trigram, stemmedwords, token = "ngrams", n = 3) %>% unique()
#Need to seperate words so can determine that words aren't the same
trigram_seperated <- lyric_trigrams %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ", remove = FALSE)
#Make sure trigrams don't have same word to avoid "baby baby baby", also remove case of each song written by babyface, also only care about phrase appearing once in a song (don't want 'i am blue' to repeatedly appear)
unique_trigrams = trigram_seperated %>%
filter(word1 != word2 & word2 != word3 & word1 != word3)
#Find how many times each trigram appears in songs of a particular genre
trigram_genre_counts = unique_trigrams %>% group_by(genre, trigram) %>% mutate(count = n()) %>% ungroup()
#Filter out specific trigrams that aren't lyrics, as well as unknown and not avaialable genre
trigram_genre_counts = trigram_genre_counts %>% filter(
genre != "Not Available" &
genre != "Other" &
trigram != "written reid babyface" &
trigram != "written babyface performed" &
trigram != "chorus repeat x" &
trigram != "daryl simmons performed" &
trigram != "written billy burnette" &
trigram != "babyface daryl simmons" &
trigram != "dennis ufo music" &
trigram != "sandy dennis ufo" &
trigram != "reid babyface daryl" &
trigram != "performed tony braxton" &
trigram != "music vestergaard lyrics"&
trigram != "vestergaard lyrics frolund" &
trigram != "written babyface reid" &
trigram != "performed whitney houston")
#Find most frequent appearing trigram in each genre and the number of times
genre_top_percentile = trigram_genre_counts %>% group_by(genre) %>% summarise(most_popular = quantile(count, probs = 1))
#Rejoin so only keep songs that contain most popular trigram in that song's genre
most_popular_trigram = trigram_genre_counts %>% inner_join(genre_top_percentile, by = c("genre" = "genre", "count" = "most_popular"))
#Find frequency that that trigram for songs in a genre appeared in each year
trigram_over_time = most_popular_trigram %>% group_by(genre, trigram, year) %>% mutate(genre_popular_trigram_count_by_year = n()) %>% ungroup()
trigram_over_time = trigram_over_time %>% left_join(genre_year_song_counts, by = c("genre" = "genre", "year" = "year")) %>% mutate(percent_of_songs_in = genre_popular_trigram_count_by_year/genre_year_count * 100)
#Create unique column for graph
trigram_over_time$genre_w1_w2_w3 = paste(trigram_over_time$genre, trigram_over_time$trigram, sep="_")
#Select columns for graph and remove ties
trigram_genre_year_data = trigram_over_time %>%
select(year, percent_of_songs_in, genre_w1_w2_w3, count) %>%
unique() %>%
filter(
genre_w1_w2_w3 != "Indie_time fall love" &
genre_w1_w2_w3 != "Jazz_sing love song" &
genre_w1_w2_w3 != "Metal_blaze ya dead" &
genre_w1_w2_w3 != "R&B_love rest life")
#To improve graph remove rows where data only shows up once
trigram_genre_year_data = trigram_genre_year_data %>% filter(year > 2000)
trigram_genre_year_data[is.na(trigram_genre_year_data)] <- 0
ggplot(trigram_genre_year_data, aes(x=year, y=genre_popular_trigram_count_by_year, col=genre_w1_w2_w3)) +
geom_line() +
ylab(label="Number of songs in") +
xlab("Year") +
ggtitle("Each Genre's most popular trigram appearances over Time")
ggplot(data = trigram_genre_year_data,
mapping = aes(x = year, y = percent_of_songs_in, color = genre_w1_w2_w3)) +
geom_line() +
facet_grid(rows = vars(genre_w1_w2_w3), scales = "free_y") +
xlab("Year") +
ylab(label="Percent of songs in") +
ggtitle("Each Genre's most popular trigram appearances over Time") +
theme_bw()
unnested_lyrics <- dt_lyrics %>%
unnest_tokens(word, lyrics)
new_sentiments <- sentiments %>%
mutate( sentiment = ifelse(sentiment == "positive", 1, ifelse(sentiment == "negative", -1, 0)))
song_sentiment <- unnested_lyrics %>% left_join(new_sentiments, by = c("word" = "word"))
song_sentiment[is.na(song_sentiment)] <- 0
average_song_sentiment <- song_sentiment %>%
group_by(song,genre,artist,year) %>% summarize(total_song_sentiment = sum(sentiment), song_lyric_words = n()) %>%   mutate(average_song_sentiment = total_song_sentiment/song_lyric_words) %>% ungroup()
average_genre_sentiment_over_time <- average_song_sentiment %>% group_by(genre,year) %>% summarize(total_genre_sentiment = sum(average_song_sentiment), total_genre_songs = n()) %>%
mutate(average_genre_sentiment = total_genre_sentiment/total_genre_songs) %>% ungroup() %>% filter(year>1999 & genre != "Other" & genre != "Not Available")
ggplot(average_genre_sentiment_over_time, aes(x=year, y=average_genre_sentiment, col=genre)) +
geom_line() +
ylab(label="Average Sentiment per Song") +
xlab("Year") +
ggtitle("Genre Sentiment over Time")
ggplot(data = average_genre_sentiment_over_time,
mapping = aes(x = year, y = average_genre_sentiment, color = genre)) +
geom_line() +
facet_grid(rows = vars(genre)) +
xlab("Year") +
ylab(label="Average Sentiment per Song") +
ggtitle("Genre Sentiment over Time") +
theme_bw()
setwd("~/Desktop/fall2019-proj1--slal12/doc")
unnested_lyrics <- dt_lyrics %>%
unnest_tokens(word, lyrics)
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(ggplot2)
#We use the processed data and artist information for our analysis.
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
unnested_lyrics <- dt_lyrics %>%
unnest_tokens(word, lyrics)
new_sentiments <- sentiments %>%
mutate( sentiment = ifelse(sentiment == "positive", 1, ifelse(sentiment == "negative", -1, 0)))
song_sentiment <- unnested_lyrics %>% left_join(new_sentiments, by = c("word" = "word"))
song_sentiment[is.na(song_sentiment)] <- 0
average_song_sentiment <- song_sentiment %>%
group_by(song,genre,artist,year) %>% summarize(total_song_sentiment = sum(sentiment), song_lyric_words = n()) %>%   mutate(average_song_sentiment = total_song_sentiment/song_lyric_words) %>% ungroup()
average_genre_sentiment_over_time <- average_song_sentiment %>% group_by(genre,year) %>% summarize(total_genre_sentiment = sum(average_song_sentiment), total_genre_songs = n()) %>%
mutate(average_genre_sentiment = total_genre_sentiment/total_genre_songs) %>% ungroup() %>% filter(year>1999 & genre != "Other" & genre != "Not Available")
ggplot(data = average_genre_sentiment_over_time,
mapping = aes(x = year, y = average_genre_sentiment, color = genre)) +
geom_line() +
facet_grid(rows = vars(genre)) +
xlab("Year") +
ylab(label="Average Sentiment per Song") +
ggtitle("Genre Sentiment over Time") +
theme_bw()
ggplot(data = average_genre_sentiment_over_time,
mapping = aes(x = year, y = average_genre_sentiment, color = genre)) +
geom_line() +
facet_grid(rows = vars(genre)) +
xlab("Year") +
ylab(label="Average Sentiment per Song") +
ggtitle("Genre Sentiment over Time") +
theme_bw()
View(average_song_sentiment)
ggplot(average_song_sentiment, aes(y=as.factor(year),
x=average_song_sentiment,
fill=genre)) +
geom_density_ridges(alpha=0.25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0, 0))
install.packages("ggridges")
library(ggridges)
ggplot(average_song_sentiment, aes(y=as.factor(year),
x=average_song_sentiment,
fill=genre)) +
geom_density_ridges(alpha=0.25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0, 0))
ridge_plot = average_song_sentiment %>% filter(year>1999 & genre != "Other" & genre != "Not Available")
ggplot(ridge_plot, aes(y=as.factor(year),
x=average_song_sentiment,
fill=genre)) +
geom_density_ridges(alpha=0.25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(0, 0))
ggplot(ridge_plot, aes(y=year,
x=average_song_sentiment,
fill=genre)) +
geom_density_ridges(alpha=0.25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(-.5, .5))
ggplot(ridge_plot, aes(y=as.factor(year),
x=average_song_sentiment,
fill=genre)) +
geom_density_ridges(alpha=0.25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(-.5, .5))
ggplot(ridge_plot, mapping = aes(y=as.factor(year),
x=average_song_sentiment)) +
geom_density_ridges(alpha=0.25) +
facet_grid(rows = vars(genre)) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(-.5, .5))
ggplot(ridge_plot, aes(y=as.factor(year),
x=average_song_sentiment,
fill=genre)) +
geom_density_ridges(alpha=0.25) +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(expand = c(-.5, .5))
